<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.service.mapper.CollegeMapper">

    <resultMap type="College" id="CollegeResult">
        <result property="collegeId"    column="college_id"    />
        <result property="collegeName"    column="college_name"    />
        <result property="universityId"    column="university_id"    />
        <result property="universityName"    column="university_name"    />
        <result property="createTime"    column="create_time"    />
        <result property="state"    column="state"    />
        <result property="remarks"    column="remarks"    />
    </resultMap>

    <resultMap id="CollegeMajorResult" type="College" extends="CollegeResult">
        <collection property="majorList" notNullColumn="major_id" javaType="java.util.List" resultMap="MajorResult" />
    </resultMap>

    <resultMap type="Major" id="MajorResult">
        <result property="majorId"    column="major_id"    />
        <result property="majorName"    column="major_name"    />
        <result property="collegeId"    column="college_id"    />
        <result property="createDate"    column="create_date"    />
        <result property="state"    column="state"    />
        <result property="remarks"    column="remarks"    />
        <result property="state"    column="mstate"    />
        <result property="remarks"    column="mremarks"    />
    </resultMap>

    <sql id="selectCollegeVo">
--         select college_id, college_name, university_id,university_name, create_time, state, remarks from college
    select college_id, college_name, col.university_id,u.university_name, col.create_time, col.state, col.remarks from college col join university u on col.university_id=u.university_id
    </sql>

    <select id="selectCollegeList" parameterType="College" resultMap="CollegeResult">
        <include refid="selectCollegeVo"/>
        <where>
            <if test="collegeName != null  and collegeName != ''"> and college_name like concat('%', #{collegeName}, '%')</if>
            <if test="universityId != null "> and col.university_id = #{universityId}</if>
            <if test="state != null "> and col.state = #{state}</if>
        </where>
    </select>

    <select id="selectCollegeById" parameterType="Long" resultMap="CollegeMajorResult">
        select a.college_id, a.college_name, a.university_id, a.create_time, a.state, a.remarks,
            b.major_id, b.major_name, b.college_id, b.create_date, b.state as mstate, b.remarks as mremarks
        from college a
        left join major b on b.college_id = a.college_id
        where a.college_id = #{collegeId}
    </select>

    <insert id="insertCollege" parameterType="College" useGeneratedKeys="true" keyProperty="collegeId">
        insert into college
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="collegeName != null and collegeName != ''">college_name,</if>
            <if test="universityId != null">university_id,</if>
            <if test="createTime != null">create_time,</if>
            <if test="state != null">state,</if>
            <if test="remarks != null">remarks,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="collegeName != null and collegeName != ''">#{collegeName},</if>
            <if test="universityId != null">#{universityId},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="state != null">#{state},</if>
            <if test="remarks != null">#{remarks},</if>
         </trim>
    </insert>

    <update id="updateCollege" parameterType="College">
        update college
        <trim prefix="SET" suffixOverrides=",">
            <if test="collegeName != null and collegeName != ''">college_name = #{collegeName},</if>
            <if test="universityId != null">university_id = #{universityId},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="state != null">state = #{state},</if>
            <if test="remarks != null">remarks = #{remarks},</if>
        </trim>
        where college_id = #{collegeId}
    </update>

    <delete id="deleteCollegeById" parameterType="Long">
        delete from college where college_id = #{collegeId}
    </delete>

    <delete id="deleteCollegeByIds" parameterType="String">
        delete from college where college_id in
        <foreach item="collegeId" collection="array" open="(" separator="," close=")">
            #{collegeId}
        </foreach>
    </delete>

    <delete id="deleteMajorByMajorIds" parameterType="String">
        delete from major where major_id in
        <foreach item="majorId" collection="array" open="(" separator="," close=")">
            #{majorId}
        </foreach>
    </delete>

    <delete id="deleteMajorByMajorId" parameterType="Long">
        delete from major where major_id = #{majorId}
    </delete>

    <insert id="batchMajor">
        insert into major( major_id, major_name, college_id, create_date, state, remarks) values
		<foreach item="item" index="index" collection="list" separator=",">
            ( #{item.majorId}, #{item.majorName}, #{item.collegeId}, #{item.createDate}, #{item.state}, #{item.remarks})
        </foreach>
    </insert>
</mapper>

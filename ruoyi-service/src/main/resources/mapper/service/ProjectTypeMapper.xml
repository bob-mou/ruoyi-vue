<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.service.mapper.ProjectTypeMapper">

    <resultMap type="ProjectType" id="ProjectTypeResult">
        <result property="projectTypeId"    column="project_type_id"    />
        <result property="projectTypeName"    column="project_type_name"    />
        <result property="createDate"    column="create_date"    />
        <result property="state"    column="state"    />
        <result property="remarks"    column="remarks"    />
    </resultMap>

    <resultMap id="ProjectTypeProjectResult" type="ProjectType" extends="ProjectTypeResult">
        <collection property="projectList" notNullColumn="project_id" javaType="java.util.List" resultMap="ProjectResult" />
    </resultMap>

    <resultMap type="Project" id="ProjectResult">
        <result property="projectId"    column="project_id"    />
        <result property="projectTypeId"    column="project_type_id"    />
        <result property="projectName"    column="project_name"    />
        <result property="projectDetail"    column="project_detail"    />
        <result property="projectTech"    column="project_tech"    />
        <result property="createDate"    column="create_date"    />
        <result property="state"    column="state"    />
        <result property="remarks"    column="remarks"    />
        <result property="state"    column="pstate"    />
        <result property="remarks"    column="premarks"    />
    </resultMap>

    <sql id="selectProjectTypeVo">
        select project_type_id, project_type_name, create_date, state, remarks from project_type
    </sql>

    <select id="selectProjectTypeList" parameterType="ProjectType" resultMap="ProjectTypeResult">
        <include refid="selectProjectTypeVo"/>
        <where>
            <if test="projectTypeName != null  and projectTypeName != ''"> and project_type_name like concat('%', #{projectTypeName}, '%')</if>
            <if test="createDate != null "> and create_date = #{createDate}</if>
            <if test="state != null "> and state = #{state}</if>
        </where>
    </select>

    <select id="selectProjectTypeById" parameterType="Long" resultMap="ProjectTypeProjectResult">
        select a.project_type_id, a.project_type_name, a.create_date, a.state, a.remarks,
            b.project_id, b.project_type_id, b.project_name, b.project_detail, b.project_tech, b.create_date, b.state as pstate, b.remarks as premarks
        from project_type a
        left join project b on b.project_type_id = a.project_type_id
        where a.project_type_id = #{projectTypeId}
    </select>

    <insert id="insertProjectType" parameterType="ProjectType" useGeneratedKeys="true" keyProperty="projectTypeId">
        insert into project_type
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="projectTypeName != null and projectTypeName != ''">project_type_name,</if>
            <if test="createDate != null">create_date,</if>
            <if test="state != null">state,</if>
            <if test="remarks != null">remarks,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="projectTypeName != null and projectTypeName != ''">#{projectTypeName},</if>
            <if test="createDate != null">#{createDate},</if>
            <if test="state != null">#{state},</if>
            <if test="remarks != null">#{remarks},</if>
         </trim>
    </insert>

    <update id="updateProjectType" parameterType="ProjectType">
        update project_type
        <trim prefix="SET" suffixOverrides=",">
            <if test="projectTypeName != null and projectTypeName != ''">project_type_name = #{projectTypeName},</if>
            <if test="createDate != null">create_date = #{createDate},</if>
            <if test="state != null">state = #{state},</if>
            <if test="remarks != null">remarks = #{remarks},</if>
        </trim>
        where project_type_id = #{projectTypeId}
    </update>

    <delete id="deleteProjectTypeById" parameterType="Long">
        delete from project_type where project_type_id = #{projectTypeId}
    </delete>

    <delete id="deleteProjectTypeByIds" parameterType="String">
        delete from project_type where project_type_id in
        <foreach item="projectTypeId" collection="array" open="(" separator="," close=")">
            #{projectTypeId}
        </foreach>
    </delete>

    <delete id="deleteProjectByProjectTypeIds" parameterType="String">
        delete from project where project_type_id in
        <foreach item="projectTypeId" collection="array" open="(" separator="," close=")">
            #{projectTypeId}
        </foreach>
    </delete>

    <delete id="deleteProjectByProjectTypeId" parameterType="Long">
        delete from project where project_type_id = #{projectTypeId}
    </delete>

    <insert id="batchProject">
        insert into project( project_id, project_type_id, project_name, project_detail, project_tech, create_date, state, remarks) values
		<foreach item="item" index="index" collection="list" separator=",">
            ( #{item.projectId}, #{item.projectTypeId}, #{item.projectName}, #{item.projectDetail}, #{item.projectTech}, #{item.createDate}, #{item.state}, #{item.remarks})
        </foreach>
    </insert>
</mapper>

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.service.mapper.UniversityMapper">

    <resultMap type="University" id="UniversityResult">
        <result property="universityId"    column="university_id"    />
        <result property="universityName"    column="university_name"    />
        <result property="logoPath"    column="logo_path"    />
        <result property="address"    column="address"    />
        <result property="createTime"    column="create_time"    />
        <result property="state"    column="state"    />
        <result property="remarks"    column="remarks"    />
    </resultMap>

    <resultMap id="UniversityCollegeResult" type="University" extends="UniversityResult">
        <collection property="collegeList" notNullColumn="college_id" javaType="java.util.List" resultMap="CollegeResult" />
    </resultMap>

    <resultMap type="College" id="CollegeResult">
        <result property="collegeId"    column="college_id"    />
        <result property="collegeName"    column="college_name"    />
        <result property="universityId"    column="university_id"    />
        <result property="createTime"    column="create_time"    />
        <result property="state"    column="state"    />
        <result property="remarks"    column="remarks"    />
        <result property="state"    column="cstate"    />
        <result property="remarks"    column="cremarks"    />
    </resultMap>

    <sql id="selectUniversityVo">
        select university_id, university_name, logo_path, address, create_time, state, remarks from university
    </sql>

    <select id="selectUniversityList" parameterType="University" resultMap="UniversityResult">
        <include refid="selectUniversityVo"/>
        <where>
            <if test="universityName != null  and universityName != ''"> and university_name like concat('%', #{universityName}, '%')</if>
            <if test="address != null  and address != ''"> and address = #{address}</if>
            <if test="state != null "> and state = #{state}</if>
        </where>
    </select>

    <select id="selectUniversityById" parameterType="Long" resultMap="UniversityCollegeResult">
        select a.university_id, a.university_name, a.logo_path, a.address, a.create_time, a.state, a.remarks,
            b.college_id, b.college_name, b.university_id, b.create_time, b.state as cstate, b.remarks as cremarks
        from university a
        left join college b on b.university_id = a.university_id
        where a.university_id = #{universityId}
    </select>

    <insert id="insertUniversity" parameterType="University" useGeneratedKeys="true" keyProperty="universityId">
        insert into university
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="universityName != null and universityName != ''">university_name,</if>
            <if test="logoPath != null and logoPath != ''">logo_path,</if>
            <if test="address != null and address != ''">address,</if>
            <if test="createTime != null">create_time,</if>
            <if test="state != null">state,</if>
            <if test="remarks != null">remarks,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="universityName != null and universityName != ''">#{universityName},</if>
            <if test="logoPath != null and logoPath != ''">#{logoPath},</if>
            <if test="address != null and address != ''">#{address},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="state != null">#{state},</if>
            <if test="remarks != null">#{remarks},</if>
         </trim>
    </insert>

    <update id="updateUniversity" parameterType="University">
        update university
        <trim prefix="SET" suffixOverrides=",">
            <if test="universityName != null and universityName != ''">university_name = #{universityName},</if>
            <if test="logoPath != null and logoPath != ''">logo_path = #{logoPath},</if>
            <if test="address != null and address != ''">address = #{address},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
            <if test="state != null">state = #{state},</if>
            <if test="remarks != null">remarks = #{remarks},</if>
        </trim>
        where university_id = #{universityId}
    </update>

    <delete id="deleteUniversityById" parameterType="Long">
        delete from university where university_id = #{universityId}
    </delete>

    <delete id="deleteUniversityByIds" parameterType="String">
        delete from university where university_id in
        <foreach item="universityId" collection="array" open="(" separator="," close=")">
            #{universityId}
        </foreach>
    </delete>

    <delete id="deleteCollegeByUniversityIds" parameterType="String">
        delete from college where university_id in
        <foreach item="universityId" collection="array" open="(" separator="," close=")">
            #{universityId}
        </foreach>
    </delete>

    <delete id="deleteCollegeByUniversityId" parameterType="Long">
        delete from college where university_id = #{universityId}
    </delete>

    <insert id="batchCollege">
        insert into college(college_name, university_id, create_time, state, remarks) values
		<foreach item="item" index="index" collection="list" separator=",">
            (#{item.collegeName}, #{item.universityId}, #{item.createTime}, #{item.state}, #{item.remarks})
        </foreach>
    </insert>
</mapper>
